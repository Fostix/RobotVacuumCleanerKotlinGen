/**
* Robot vacuum cleaner
* No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
*
* OpenAPI spec version: 1.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/package io.swagger.server

import io.ktor.application.ApplicationCall
import io.ktor.http.HttpMethod
import io.ktor.locations.handle
import io.ktor.locations.location
import io.ktor.locations.Location
import io.ktor.util.pipeline.PipelineContext
import io.ktor.routing.Route
import io.ktor.routing.method
import io.swagger.server.models.*;


// NOTE: ktor-location@0.9.0 is missing extension for Route.delete. This includes it.
inline fun <reified T : Any> Route.delete(noinline body: suspend PipelineContext<Unit, ApplicationCall>.(T) -> Unit): Route {
    return location(T::class) {
        method(HttpMethod.Delete) {
            handle(body)
        }
    }
}

object Paths {
    /**
     * 
     * 
     */
    @Location("/feedback/get") class getFeedback()

    /**
     * 
     * 
     * @param body  
     */
    @Location("/feedback") class sendFeedback(val body: Feedback)

    /**
     * 
     * 
     * @param robotId  
     */
    @Location("/gobase") class goBase(val robotId: kotlin.Int)

    /**
     * 
     * 
     * @param body  
     */
    @Location("/room") class createRoom(val body: Room)

    /**
     * 
     * 
     * @param roomId  
     */
    @Location("/room/{roomId}") class deleteRoomById(val roomId: kotlin.String)

    /**
     * 
     * 
     */
    @Location("/room/All") class getRoom()

    /**
     * 
     * 
     * @param roomId  
     */
    @Location("/room{roomId}") class getRoomById(val roomId: kotlin.Int)

    /**
     * 
     * 
     * @param body  
     * @param roomId  
     */
    @Location("/room/{roomId}") class updateRoom(val body: Room, val roomId: kotlin.String)

    /**
     * create schedule for robot
     * 
     * @param body  
     */
    @Location("/schedule/create") class createTaskInSchedule(val body: TaskForRobot)

    /**
     * delete task in schedule
     * 
     * @param taskId  
     * @param body  (optional)
     */
    @Location("/schedule/{taskId}") class createTaskInSchedule1(val taskId: kotlin.String, val body: TaskForRobot)

    /**
     * 
     * 
     */
    @Location("/schedule/All") class getScheduleAllRobots()

    /**
     * 
     * 
     * @param idRobot  
     */
    @Location("/schedule/{IdRobots}") class getScheduleByIdRobots(val idRobot: kotlin.Int)

    /**
     * 
     * 
     * @param body  
     * @param scheduleId  
     */
    @Location("/schedule/{scheduleId}") class updateTaskInSchedule(val body: TaskForRobot, val scheduleId: kotlin.String)

    /**
     * 
     * 
     * @param body  
     */
    @Location("/sendclean/launch") class sendClean(val body: TaskForRobotOnlyLaunch)

    /**
     * 
     * 
     */
    @Location("/statistic") class getStatistic()

    /**
     * create user
     * 
     * @param body  
     */
    @Location("/registration") class addNewUser(val body: User)

    /**
     * 
     * 
     */
    @Location("/getUser") class getUser()

    /**
     * 
     * 
     * @param body  
     */
    @Location("/updateUser") class updateUser(val body: User)

}
